// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/apps": {
            "get": {
                "description": "Возвращает json со списком приложений зарегистрированных в этом сервисе.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Получение списка приложений.",
                "operationId": "auth-apps",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Application"
                            }
                        }
                    }
                }
            }
        },
        "/clients": {
            "get": {
                "description": "Возвращает json со списком возможных клиентов.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Clients"
                ],
                "summary": "Получение списка клиентов.",
                "operationId": "auth-clients",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Client"
                            }
                        }
                    }
                }
            }
        },
        "/login/": {
            "post": {
                "description": "Необходим либо логин, либо email.\nВ случае, если предоставлены оба поля приоритет будет у логина.\nВозвращает пару токенов - access и refresh токен или json с ошибкой",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Аутентификация пользователя по логину или email и паролю",
                "operationId": "auth-login",
                "parameters": [
                    {
                        "description": "json запроса:",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.HandleLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jwt.TokenPair"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.HttpErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout/": {
            "post": {
                "description": "Принимает json с refresh-токеном.\nУдаляет токен из базы данных. Либо ничего не возвращает, либо возвращает ошибку",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Выход из аккаунта.",
                "operationId": "auth-logout",
                "parameters": [
                    {
                        "description": "json запроса:",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.HandleRefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.HttpErrorResponse"
                        }
                    }
                }
            }
        },
        "/refresh/": {
            "post": {
                "description": "Принимает json с refresh-токеном.\nВозвращает либо json с парой access-refresh токенами, либо ошибку.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Обновление JWT токена.",
                "operationId": "auth-refresh",
                "parameters": [
                    {
                        "description": "json запроса:",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.HandleRefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/jwt.TokenPair"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.HttpErrorResponse"
                        }
                    }
                }
            }
        },
        "/register/": {
            "post": {
                "description": "Принимает json с пользователем.\nВозвращает либо созданного пользователя либо json с ошибкой.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Регистрация пользователя.",
                "operationId": "auth-register",
                "parameters": [
                    {
                        "description": "json пользователя:",
                        "name": "Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.HandleRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.HttpErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.HandleLoginRequest": {
            "type": "object",
            "properties": {
                "app_id": {
                    "type": "string",
                    "example": "1"
                },
                "client_id": {
                    "type": "string",
                    "example": "1"
                },
                "email": {
                    "description": "either email or username should not be empty",
                    "type": "string",
                    "example": "aboba@gmail.ru"
                },
                "password": {
                    "type": "string",
                    "example": "qwerty123456"
                },
                "username": {
                    "type": "string",
                    "example": "aboba"
                }
            }
        },
        "handlers.HandleRefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "07b7f432-7414-4340-890d-0376e46f1a00"
                }
            }
        },
        "handlers.HandleRegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "aboba@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "aboba32"
                },
                "username": {
                    "type": "string",
                    "example": "aboba"
                }
            }
        },
        "handlers.HttpErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "error": {
                    "type": "string",
                    "example": "something went wrong..."
                }
            }
        },
        "jwt.TokenPair": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciJ9.eyX0228.LQpEZvladOSc"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "ea7f64d0-9e7a-41ac-a9a3-ca27ee71434f"
                }
            }
        },
        "models.Application": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1"
                },
                "name": {
                    "type": "string",
                    "example": "clown-space"
                }
            }
        },
        "models.Client": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1"
                },
                "name": {
                    "type": "string",
                    "example": "android"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "aboba@gmail.com"
                },
                "id": {
                    "type": "string",
                    "example": "107"
                },
                "username": {
                    "type": "string",
                    "example": "aboba"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Clown-ID API",
	Description:      "Auth service for clown-devs projects",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
