definitions:
  handlers.HandleLoginRequest:
    properties:
      app_id:
        example: "1"
        type: string
      client_id:
        example: "1"
        type: string
      email:
        description: either email or username should not be empty
        example: aboba@gmail.ru
        type: string
      password:
        example: qwerty123456
        type: string
      username:
        example: aboba
        type: string
    type: object
  handlers.HandleRefreshTokenRequest:
    properties:
      refresh_token:
        example: 07b7f432-7414-4340-890d-0376e46f1a00
        type: string
    type: object
  handlers.HandleRegisterRequest:
    properties:
      email:
        example: aboba@gmail.com
        type: string
      password:
        example: aboba32
        type: string
      username:
        example: aboba
        type: string
    type: object
  handlers.HttpErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      error:
        example: something went wrong...
        type: string
    type: object
  jwt.TokenPair:
    properties:
      access_token:
        example: eyJhbGciJ9.eyX0228.LQpEZvladOSc
        type: string
      refresh_token:
        example: ea7f64d0-9e7a-41ac-a9a3-ca27ee71434f
        type: string
    type: object
  models.Application:
    properties:
      id:
        example: "1"
        type: string
      name:
        example: clown-space
        type: string
    type: object
  models.Client:
    properties:
      id:
        example: "1"
        type: string
      name:
        example: android
        type: string
    type: object
  models.User:
    properties:
      email:
        example: aboba@gmail.com
        type: string
      id:
        example: "107"
        type: string
      username:
        example: aboba
        type: string
    type: object
info:
  contact: {}
  description: Auth service for clown-devs projects
  title: Clown-ID API
  version: "0.1"
paths:
  /apps:
    get:
      description: Возвращает json со списком приложений зарегистрированных в этом
        сервисе.
      operationId: auth-apps
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Application'
            type: array
      summary: Получение списка приложений.
      tags:
      - Clients
  /clients:
    get:
      description: Возвращает json со списком возможных клиентов.
      operationId: auth-clients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Client'
            type: array
      summary: Получение списка клиентов.
      tags:
      - Clients
  /login/:
    post:
      description: |-
        Необходим либо логин, либо email.
        В случае, если предоставлены оба поля приоритет будет у логина.
        Возвращает пару токенов - access и refresh токен или json с ошибкой
      operationId: auth-login
      parameters:
      - description: 'json запроса:'
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/handlers.HandleLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jwt.TokenPair'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpErrorResponse'
      summary: Аутентификация пользователя по логину или email и паролю
      tags:
      - Auth
  /logout/:
    post:
      consumes:
      - application/json
      description: |-
        Принимает json с refresh-токеном.
        Удаляет токен из базы данных. Либо ничего не возвращает, либо возвращает ошибку
      operationId: auth-logout
      parameters:
      - description: 'json запроса:'
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/handlers.HandleRefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpErrorResponse'
      summary: Выход из аккаунта.
      tags:
      - Auth
  /refresh/:
    post:
      consumes:
      - application/json
      description: |-
        Принимает json с refresh-токеном.
        Возвращает либо json с парой access-refresh токенами, либо ошибку.
      operationId: auth-refresh
      parameters:
      - description: 'json запроса:'
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/handlers.HandleRefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jwt.TokenPair'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpErrorResponse'
      summary: Обновление JWT токена.
      tags:
      - Auth
  /register/:
    post:
      consumes:
      - application/json
      description: |-
        Принимает json с пользователем.
        Возвращает либо созданного пользователя либо json с ошибкой.
      operationId: auth-register
      parameters:
      - description: 'json пользователя:'
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/handlers.HandleRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpErrorResponse'
      summary: Регистрация пользователя.
      tags:
      - Auth
swagger: "2.0"
